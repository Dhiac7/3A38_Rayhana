{% extends 'user/client.html.twig' %}


{% block title %}Wheel of Fortune{% endblock %}

{% block body %}
<div class="wheel-container">
    <h1>Roulette de promotion</h1>

    <div class="price-info">
        <p>Prix du panier: <span id="panier-price">{{ app.session.get('panier') is not empty ? panierTotal : '0.00' }}</span> DT</p>
    </div>

    <div class="game-area">
        <canvas id="canvas" width="500" height="500"></canvas>
        <button id="spin" class="spin-button" {% if hasPlayed %}disabled{% endif %}>go</button>
    </div>

    <div id="result" class="result-display"></div>
    <div id="price-result" class="price-result"></div>
</div>

<style>
    body {
        font-family: 'Segoe UI', Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #ffffff;
    }

    .wheel-container {
        max-width: 900px;
        margin: 0 auto;
        padding: 40px 20px;
        text-align: center;
        position: relative;
    }

    h1 {
        font-size: 3.2rem;
        text-transform: uppercase;
        letter-spacing: 3px;
        margin-bottom: 40px;
        background: linear-gradient(45deg, #FF0066, #FF9500);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        font-weight: bold;
        text-align: center;
        text-shadow: 0 2px 10px rgba(255, 0, 102, 0.2);
    }

    .price-info {
        margin-bottom: 30px;
        font-size: 1.2rem;
        font-weight: bold;
      /* Align text to the left */
        margin-left: -100px; /
    }

    .game-area {
        position: relative;
        display: inline-block;
        margin-bottom: 30px;
    }

    canvas {
        background: #ffffff;
        border-radius: 50%;
        box-shadow: 0 0 40px rgba(255, 0, 102, 0.2), 0 0 20px rgba(255, 149, 0, 0.2);
        max-width: 100%;
        height: auto;
    }

    .spin-button {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: linear-gradient(45deg, #FF0066, #FF9500);
        color: #fff;
        border: none;
        width: 100px;
        height: 100px;
        border-radius: 50%;
        font-size: 1.5rem;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.2);
        box-shadow: 0 5px 15px rgba(255, 0, 102, 0.4);
        z-index: 10;
    }

    .spin-button:hover {
        transform: translate(-50%, -50%) scale(1.05);
        box-shadow: 0 7px 20px rgba(255, 0, 102, 0.5);
    }

    .spin-button:active {
        transform: translate(-50%, -50%) scale(0.95);
    }

    .spin-button:disabled {
        background: #ccc;
        cursor: not-allowed;
    }

    .result-display,
    .price-result {
        margin-top: 20px;
        font-size: 2rem;
        font-weight: bold;
        height: 60px;
        color: #333;
        opacity: 0;
        transition: opacity 0.5s ease, transform 0.5s ease;
        background: linear-gradient(45deg, rgba(255, 0, 102, 0.1), rgba(255, 149, 0, 0.1));
        border-radius: 50px;
        padding: 15px 30px;
        display: inline-block;
        transform: translateY(20px);
    }

    .result-display.active,
    .price-result.active {
        opacity: 1;
        transform: translateY(0);
    }

    .price-result {
        background: linear-gradient(45deg, rgba(0, 204, 255, 0.1), rgba(51, 204, 51, 0.1));
    }

    @media (max-width: 600px) {
        .wheel-container {
            padding: 20px 10px;
        }

        h1 {
            font-size: 2rem;
            margin-bottom: 20px;
        }

        .spin-button {
            width: 80px;
            height: 80px;
            font-size: 1.2rem;
        }
    }
</style>

<script>
    var options = ["5%", "10%", "15%", "25%", "30%", "35%"];
    var colors = ["#FF0066", "#FF9500", "#00CCFF", "#33CC33", "#CC33FF", "#FFCC00"];

    var startAngle = 0;
    var arc = Math.PI / (options.length / 2);
    var spinTimeout = null;

    // Augmenter la valeur de départ pour une rotation plus rapide
    var spinArcStart = 20; // Valeur doublée de l'original (10)
    var spinTime = 0;
    var spinTimeTotal = 0;

    var ctx;
    var panierTotal = {{ app.session.get('panier') is not empty ? panierTotal : 0 }};
    var hasPlayed = {{ hasPlayed ? 'true' : 'false' }};

    document.getElementById("spin").addEventListener("click", spin);
    var resultDisplay = document.getElementById("result");
    var priceResultDisplay = document.getElementById("price-result");

    function drawRouletteWheel() {
        var canvas = document.getElementById("canvas");
        if (canvas.getContext) {
            var outsideRadius = 200;
            var textRadius = 160;
            var insideRadius = 125;

            ctx = canvas.getContext("2d");
            ctx.clearRect(0, 0, 500, 500);

            // Background circle
            ctx.beginPath();
            ctx.arc(250, 250, outsideRadius + 20, 0, 2 * Math.PI, false);
            ctx.fillStyle = "#ffffff";
            ctx.fill();

            // Outer circle border
            ctx.beginPath();
            ctx.arc(250, 250, outsideRadius, 0, 2 * Math.PI, false);
            ctx.strokeStyle = "#eee";
            ctx.lineWidth = 3;
            ctx.stroke();

            ctx.font = 'bold 18px "Segoe UI", Arial, sans-serif';

            for (var i = 0; i < options.length; i++) {
                var angle = startAngle + i * arc;

                // Create vibrant gradient for each segment
                var gradient = ctx.createRadialGradient(
                    250, 250, insideRadius,
                    250 + Math.cos(angle + arc / 2) * (outsideRadius - insideRadius) / 2,
                    250 + Math.sin(angle + arc / 2) * (outsideRadius - insideRadius) / 2,
                    outsideRadius
                );

                // Make the gradient even more vibrant
                var color = colors[i];
                var lighterColor = color;

                gradient.addColorStop(0, color);
                gradient.addColorStop(1, lighterColor);

                ctx.beginPath();
                ctx.arc(250, 250, outsideRadius, angle, angle + arc, false);
                ctx.arc(250, 250, insideRadius, angle + arc, angle, true);
                ctx.fillStyle = gradient;
                ctx.strokeStyle = "#fff";
                ctx.lineWidth = 2;
                ctx.stroke();
                ctx.fill();

                ctx.save();
                ctx.shadowOffsetX = 1;
                ctx.shadowOffsetY = 1;
                ctx.shadowBlur = 3;
                ctx.shadowColor = "rgba(0,0,0,0.3)";
                ctx.fillStyle = "#FFFFFF";
                ctx.translate(250 + Math.cos(angle + arc / 2) * textRadius,
                    250 + Math.sin(angle + arc / 2) * textRadius);
                ctx.rotate(angle + arc / 2 + Math.PI / 2);
                var text = options[i];
                ctx.fillText(text, -ctx.measureText(text).width / 2, 0);
                ctx.restore();
            }

            // Center circle
            var centerGradient = ctx.createRadialGradient(250, 250, 0, 250, 250, insideRadius - 10);
            centerGradient.addColorStop(0, "#ffffff");
            centerGradient.addColorStop(1, "#f8f8f8");

            ctx.beginPath();
            ctx.arc(250, 250, insideRadius - 10, 0, 2 * Math.PI);
            ctx.fillStyle = centerGradient;
            ctx.strokeStyle = "#eee";
            ctx.lineWidth = 2;
            ctx.fill();
            ctx.stroke();

            // Arrow
            ctx.beginPath();
            ctx.moveTo(250 - 15, 250 - (outsideRadius + 15));
            ctx.lineTo(250 + 15, 250 - (outsideRadius + 15));
            ctx.lineTo(250 + 0, 250 - (outsideRadius - 15));
            ctx.fillStyle = "#FF0066";
            ctx.fill();

            // Add shiny effect to the arrow
            ctx.beginPath();
            ctx.moveTo(250 - 9, 250 - (outsideRadius + 10));
            ctx.lineTo(250 + 9, 250 - (outsideRadius + 10));
            ctx.lineTo(250 + 0, 250 - (outsideRadius - 5));
            ctx.fillStyle = "rgba(255, 255, 255, 0.3)";
            ctx.fill();
        }
    }

    function spin() {
        if (hasPlayed) {
            alert("Vous avez déjà joué cette session.");
            return;
        }

        if (panierTotal <= 0) {
            alert("Votre panier est vide. Ajoutez des produits avant de jouer.");
            return;
        }

        document.getElementById("spin").disabled = true;
        // Augmentation de l'angle initial pour un démarrage plus rapide
        spinAngleStart = Math.random() * 20 + 20; // Original: Math.random() * 10 + 10
        spinTime = 0;
        // Réduction du temps de rotation total pour une roulette plus rapide
       spinTimeTotal = 15000;
        rotateWheel();

        // Hide previous results
        resultDisplay.classList.remove("active");
        priceResultDisplay.classList.remove("active");
    }

    function rotateWheel() {
        // Augmenter l'incrément du temps pour une rotation plus rapide
        spinTime += 40; // Original: spinTime += 30
        if (spinTime >= spinTimeTotal) {
            stopRotateWheel();
            return;
        }
        var spinAngle = spinAngleStart - easeOut(spinTime, 0, spinAngleStart, spinTimeTotal);
        startAngle += (spinAngle * Math.PI / 180);
        drawRouletteWheel();
        // Réduire le délai entre les frames pour une animation plus rapide
        spinTimeout = setTimeout(function () { rotateWheel(); }, 20); // Original: 30
    }

    function stopRotateWheel() {
        clearTimeout(spinTimeout);
        var degrees = startAngle * 180 / Math.PI + 90;
        var arcd = arc * 180 / Math.PI;
        var index = Math.floor((360 - degrees % 360) / arcd);

        // Get the discount value (remove the % symbol)
        var discountText = options[index];
        var discountPercentage = parseFloat(discountText.replace('%', ''));

        // Calculate the final price
        var discount = (panierTotal * discountPercentage) / 100;
        var finalPrice = panierTotal - discount;

        // Display the results
        resultDisplay.innerHTML = "Vous avez gagné: <span style='color:" + colors[index] + "; text-shadow: 0 0 5px " + colors[index] + ";'>" + discountText + "</span> 🎉";
        priceResultDisplay.innerHTML = "Prix final: <span style='color:#33CC33; font-size: 2.2rem;'>" + finalPrice.toFixed(2) + "DT</span> <small>(Économie: " + discount.toFixed(2) + "DT)</small>";

        resultDisplay.classList.add("active");
        setTimeout(function () {
            priceResultDisplay.classList.add("active");
        }, 500);

        applyDiscountToServer(discountPercentage);
    }

    function easeOut(t, b, c, d) {
        var ts = (t /= d) * t;
        var tc = ts * t;
        return b + c * (tc + -3 * ts + 3 * t);
    }

    function applyDiscountToServer(discountPercentage) {
        fetch('{{ path("app_wheel_apply_discount") }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': '{{ csrf_token("wheel_discount") }}'
            },
            body: JSON.stringify({ discountPercentage: discountPercentage })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    hasPlayed = true;
                    document.getElementById("spin").disabled = true;
                } else {
                    alert(data.message);
                }
            })
            .catch(error => console.error('Erreur:', error));
    }

    drawRouletteWheel();
</script>
{% endblock %}